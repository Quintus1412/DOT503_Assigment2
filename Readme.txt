## Project Structure
video-manager-app/
├── pom.xml                     # Maven project configuration
├── src/
│   ├── main/
│   │   └── java/
│   │       └── com/
│   │           ├── Video.java          # Video data model
│   │           └── VideoManager.java   # Main application logic
│   └── test/
│       └── java/
│           └── com/
│               └── dot/
│                   ├── AppTest.java        # Default Maven generated test (potentially disabled/deleted)
│                   └── VideoManagerTest.java # Unit tests for VideoManager
├── target/                     # Maven build output directory
│   └── video-manager-app-1.0-SNAPSHOT.jar # Executable JAR generated by 'mvn package'
├── Readme.txt                  # Instructions on how to build and run the application
└── README.md                   # General project overview and documentation

## Features
* Add new video entries (title and link).
* View all saved video entries.
* Save video entries to `data.txt`.
* Load video entries from `data.txt`.

## Instructions for Building and Running the Video Manager Application

This application uses Apache Maven for build automation. Ensure you have Java Development Kit (JDK) 17 or higher and Apache Maven (version 3.9.10 or higher recommended) installed on your system.

1.  **Navigate to the Project Root:**
    Open your terminal or command prompt and navigate to the root directory of this project (the directory containing the 'pom.xml' file).

2.  **Clean the Project (Optional but Recommended):**
    To remove any previously compiled classes and packages:
    ```bash
    mvn clean
    ```

3.  **Compile the Application:**
    To compile the Java source code:
    ```bash
    mvn compile
    ```

4.  **Run Unit Tests:**
    To execute the JUnit 5 unit tests. Note: This project includes tests designed to demonstrate both passing and intentional failing scenarios.
    ```bash
    mvn test
    ```

5.  **Package the Application into an Executable JAR:**
    This command will compile, run tests, and then package the application into a single, executable JAR file. The JAR will be located in the 'target/' directory.
    ```bash
    mvn package
    ```

6.  **Run the Executable JAR:**
    Once the 'mvn package' command completes successfully, you can run the application directly from the generated JAR file:
    ```bash
    java -jar target/video-manager-app-1.0-SNAPSHOT.jar
    ```
    This will start the console application, and you can interact with its menu.

## Unit Tests Overview

This project includes JUnit 5 unit tests located in the `src/test/java/com/dot/` directory.
* **`VideoManagerTest.java`**:
    * This file contains custom unit tests for the `VideoManager` class's core functionalities, including adding, viewing, saving, and loading video entries.
    * **Test Scenarios (Passing - 3 tests):**
        * `testAddVideo`: Checks successful video addition and property storage.
        * `testDisplayVideos`: Verifies correct retrieval and presentation of added videos.
        * `testSaveAndLoadVideos`: Confirms accurate data persistence (writing to and loading from `data.txt`).
    * **Test Scenarios (Intentional Failures - 2 tests):**
        * `testVideoTitleEqualityFails`: Deliberately asserts a video's actual title is equal to an incorrect title, causing a failure.
        * `testReadVideoFromEmptyFileFails`: Intentionally attempts to read a video from an empty/invalid source and asserts the result is not null, causing a failure if null is correctly returned.
    * These intentional failures demonstrate the build's ability to report test failures, while the `pom.xml` configuration allows the build to proceed to the packaging phase despite these failures.

## Viewing Detailed HTML Test Reports

To get a user-friendly, formatted HTML report of the test results:

1.  **Generate the report:**
    ```bash
    mvn clean site
    ```
    This command will build your project and generate a project website, including the Surefire test report.

2.  **Open the report:**
    Navigate to `target/site/` in your project directory and open `surefire-report.html` in your web browser. This HTML file provides a comprehensive and easy-to-read overview of all your test runs, including details on passes, failures, and individual test results.

---